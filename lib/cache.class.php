<?php
/**
 * @file cache.class.php
 */
/**
 * Class Cache
 *
 * @property-read mixed $data
 * @property-read mixed $createdAt
 * @property-read mixed $updatedAt
 *
 *
 * 캐시가 특정 시간보다 오래되었는지 또는 시간 경과했는지는 cache('code')->olderThan(100) 와 같이 하면 된다. 초단위이다.
 *
 * 캐시를 사용하는 로직은 다음과 같다.
 *
 *  $cache = cache('abc');
 *  if ( $cache->olderThan(60 * 24) { // 와 같이 특정 시간이 오래되었는지 검사하고,
 *    // 그리고 아래와 같이 해서, createdAt 의 시간을 현재 stamp 로 변경한다.
 *    // 그래서 현재 실행 프로세서만 캐시 갱신 작업을 한다. 이렇게 하면 안전하게 한번만 캐시 업그레이드 작업을 하고, 캐시 업그레이드를 하는 동안 다른 프로세서가 기존 캐시 데이터를 사용 할 수 있다.
 *    $cache->renew();
 *    // 그리고 캐시 데이터를 가져와서,
 *    ...
 *    // 아래와 같이 저장하면 된다.
 *    $cache->set(' ... data ...');
 *  }
 *  // 그리고 아래와 같이
 *  $cache->data; 와 같이 데이터를 사용하면 된다.
 *
 *
 */
class Cache extends Entity
{
    public string $code;

    public function __construct(int $idx)
    {
        parent::__construct(CACHE, $idx);
    }

    /**
     * 캐시를 처음 생성하는 것이면 레코드를 생성한다.
     * 캐시가 존재하면, 업데이트를 한다.
     *
     * @param mixed $data
     * @return Cache
     */
    public function set(mixed $data): self {
        if ( $this->idx ) return $this->update([CREATED_AT => time(), 'data' => $data]); // 기존에 캐시가 존재하면, 업데이트.
        else {
            // 새로 생성한다면,
            $cache = cache()->create([CODE => $this->code, 'data' => $data]);
            // 생성한 객체의 모든 속성을 현재 객체로 전환해서, (이 때, read() 로 해결 할 수도 있음)
            $this->copyWith($cache);
            // 리턴한다.
            return $this;
        }
    }

    /**
     * 캐시 작업을 진행하는 경우, 이 함수르 호출한다.
     * 레코드가 존재하면, createdAt 을 현재 값으로 지정하고, 아니면 그냥 아무것도 하지 않는다.
     */
    public function renew() {
        if ( $this->idx ) {
            $stamp = time();
            $this->update([CREATED_AT => $stamp]);
            $this->updateData(CREATED_AT, $stamp);
        }
    }

    /**
     * 캐시된 시간이 입력된 $seconds 초 보다 더 길면, 참. 즉, 캐시 시간이 경과했으면 참.
     * @param int $seconds
     * @return bool
     */
    public function olderThan(int $seconds): bool {
        return $this->createdAt < time() - $seconds;
    }

    public function delete(): Entity
    {
        return parent::delete(); // TODO: Change the autogenerated stub
    }

}


/**
 * Returns Cache instance.
 *
 *
 * @param string $code - code 값이 있으면, code 값을 찾아 현재 객체로 전환한다. 만약, 코드에 맞는 존재하지 않으면 에러가 설정된다.
 * @return Cache
 */
function cache(string $code=''): Cache
{
    $cache = new Cache(0);

    if ( $code ) {
        $cache->code = $code;
        $cache->findOne([CODE => $code]);
    }

    return $cache;
}


