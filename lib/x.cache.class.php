<?php
/**
 * @file cache.class.php
 */
/**
 * Class Cache
 *
 * @property-read mixed $data
 * @property-read mixed $createdAt
 * @property-read mixed $updatedAt
 *
 * @note README 를 참고한다.
 *
 *
 *
 */
class Cache extends Entity
{
    public string $code;

    public function __construct(int $idx)
    {
        parent::__construct(CACHE, $idx);
    }

    /**
     * 캐시를 처음 생성하는 것이면 레코드를 생성한다.
     * 캐시가 존재하면, 업데이트를 한다.
     *
     * @param mixed $data
     * @return Cache
     */
    public function set(mixed $data): self {
        if ( $this->idx ) return $this->update([CREATED_AT => time(), 'data' => $data]); // 기존에 캐시가 존재하면, 업데이트.
        else {
            // 새로 생성한다면,
            $cache = cache()->create([CODE => $this->code, 'data' => $data]);
            // 생성한 객체의 모든 속성을 현재 객체로 전환해서, (이 때, read() 로 해결 할 수도 있음)
            $this->copyWith($cache);
            // 리턴한다.
            return $this;
        }
    }

    /**
     * 기존에 존재하는 캐시 데이터 업데이트 작업을 진행하는 경우, 이 함수를 호출한다.
     * 예를 들어 프로세스 (A) 가 olderThan() 으로 캐시 유효성 검사를 할 때, 캐시 시간이 경과 했다면,
     *      createdAt 을 현재 Unix timestamp 값으로 지정한다.
     *      이렇게 하면 캐시 데이터를 아직 업데이트 하지 않았지만, 업데이트 한 것 처럼 시간을 업데이트하는 것이다.
     * 그래서, 다른 프로세스 (B) 에서 해당 캐시를 읽을 때, 캐시 시간이 경과하지 않은 것 처럼 보인다. 또는 새로 업데이트 한 것 처럼 보인다. 하지만, 캐시 데이터는 업데이트되지 않은 이전 데이터를 사용 할 수 있다.
     * 그리고, 프로세스 (A) 가 작업이 끝나면 캐시데이터를 업데이트하고, 한번 더 createdAt 을 업데이트한다.
     *
     * 캐시 레코드가 존재하지 않으면, 아무것도 하지 않는다.
     */
    public function renew() {
        if ( $this->idx ) { // 캐시가 존재하면,
            $stamp = time(); // 현재 시간을,
            $this->update([CREATED_AT => $stamp]); // DB 에서 업데이트하고,
            $this->updateData(CREATED_AT, $stamp); // 메모리 변수에서도 업데이트 한다.
        }
    }


    /**
     * 캐시가 입력된 $seconds 보다 오래되었으면, 참을 리턴.
     *
     * 캐시된 시간 createdAt 의 값이 입력된 $seconds (초 단위) 보다 오래되었으면, 캐시 시간이 경과한 것으로 판단하여 참을 리턴한다.
     * 입력되는 $seconds 의 값을 적절히 늘였다 줄였다 할 수 있다.
     *
     * @param int $seconds
     * @return bool
     */
    public function olderThan(int $seconds): bool {
        return $this->createdAt < time() - $seconds;
    }

    public function delete(): Entity
    {
        return parent::delete(); // TODO: Change the autogenerated stub
    }

}


/**
 * Returns Cache instance.
 *
 *
 * @param string $code - code 값이 있으면, code 값을 찾아 현재 객체로 전환한다. 만약, 코드에 맞는 존재하지 않으면 에러가 설정된다.
 * @return Cache
 */
function cache(string $code=''): Cache
{
    $cache = new Cache(0);

    if ( $code ) {
        $cache->code = $code;
        $cache->findOne([CODE => $code]);
    }

    return $cache;
}


